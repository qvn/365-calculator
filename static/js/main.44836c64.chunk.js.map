{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js","calculator.js"],"names":["List","props","className","items","map","item","index","key","App","state","expression","results","expressions","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","result","calculate","String","type","placeholder","aria-label","onChange","onClick","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","getDelimiter","header","singleDelimiter","manyDelimiter","negatives","specialDelimiter","substring","indexOf","delimiters","delimiter","replace","RegExp","escape","split","element","isNaN","Number","push","filter","Error","reduce","acc","s","module","exports"],"mappings":"8QAWeA,G,MARF,SAAAC,GAAK,OAClB,wBAAIC,UAAU,cAERD,EAAME,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBAAIJ,UAAU,kBAAkBK,IAAKD,GAAQD,S,OCuDrEG,E,YApDb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,MAAQ,CACXC,WAAY,oCACZC,QAAS,GACTC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,0EAWNE,GACXC,KAAKC,SAAS,CACZR,WAAYM,EAAMG,OAAOC,U,mCAIhBJ,GACXA,EAAMK,iBACN,IAAIC,EAASC,YAAUN,KAAKR,MAAMC,YAClCO,KAAKC,SAAS,CACZN,YAAY,GAAD,mBAAMK,KAAKR,MAAMG,aAAjB,CAA8BK,KAAKR,MAAMC,WAAa,MAAQY,IACzEZ,WAAYc,OAAOF,GACnBX,QAAQ,GAAD,mBAAMM,KAAKR,MAAME,SAAjB,CAA0BW,Q,+BAKnC,OACE,yBAAKpB,UAAU,OACb,8BACA,0BAAMA,UAAU,sBAAhB,cACE,yBAAKA,UAAU,cACb,yBAAKA,UAAU,oBACf,2BAAOuB,KAAK,OAAOvB,UAAU,eAAewB,YAAY,aAAaC,aAAW,aAAaP,MAAOH,KAAKR,MAAMC,WAAYkB,SAAUX,KAAKJ,eACxI,yBAAKX,UAAU,sBAEb,4BAAQuB,KAAK,SAASvB,UAAU,kBAAkB2B,QAASZ,KAAKF,cAAc,wCAMrFE,KAAKR,MAAMG,YAAYkB,OAAS,GAC/B,0BAAM5B,UAAU,sBAAhB,WAEF,kBAAC,EAAD,CAAMC,MAAOc,KAAKR,MAAMG,mB,GAhDdmB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,yFE9HnB,SAASC,EAAaC,GAElB,IAAIC,EAAkB1B,OAAOyB,GAAQZ,MAAM,uBAEvCc,EAAgB3B,OAAOyB,GAAQZ,MAAM,uBAEzC,OAAOa,GAAmBC,EAGf,SAAS5B,EAAUb,GAE9B,IAAI0C,EACA9B,EAAS,GAIP+B,EAAmBL,EAFVtC,EAAW4C,UAAU,EAAG5C,EAAW6C,QAAQ,OAEX,MAEzCC,EAAaH,EAAgB,sBAAOA,GAAP,CAAyB,OAAQ,CAAC,MAT3B,uBAW1C,YAAsBG,EAAtB,+CAAkC,CAAC,IAA1BC,EAAyB,QAC9B/C,EAAaA,EAAWgD,QAAQ,IAAIC,OAAOA,OAAOC,OAAOH,GAAY,KAAM,MAZrC,6GAgB1C,YAAoB/C,EAAWmD,MAAM,KAArC,+CAA2C,CAAC,IAAnCC,EAAkC,QACvC,QAAQ,GACJ,KAAKC,MAAMC,OAAOF,IAGlB,KAAKE,OAAOF,GAAW,IACnBxC,EAAO2C,KAAK,GACZ,MACJ,QACI3C,EAAO2C,KAAKD,OAAOF,MAzBW,kFAgC1C,IAFAV,EAAY9B,EAAO4C,QAAO,SAAA7D,GAAI,OAAIA,EAAO,MAE3ByB,OAAS,EACnB,MAAM,IAAIqC,MAAM,oCAAsC3C,OAAO4B,GAAa,gCAO9E,OAJc9B,EAAO8C,QAAO,SAACC,EAAKhE,GAAN,OAAgBgE,EAAMhE,IAAO,GAjD7DsD,OAAOC,OAAS,SAASU,GACrB,OAAOA,EAAEZ,QAAQ,yBAA0B,SAsD/Ca,EAAOC,QAAU,CAACjD,YAAWyB,kB","file":"static/js/main.44836c64.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconst List = props => (\n<ul className=\"list-group\">\n    {\n      props.items.map((item, index) => <li className=\"list-group-item\" key={index}>{item}</li>)\n    }\n  </ul>\n);\n\nexport default List;","import React from 'react';\nimport './App.css';\n// import Button from './Button';\nimport List from './List';\nimport calculate from './calculator.js';\n\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      expression: '//[*][!!][r9r]\\n11r9r22*hh*33!!44',\n      results: [],\n      expressions: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      expression: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let result = calculate(this.state.expression);\n    this.setState({\n      expressions: [...this.state.expressions, this.state.expression + \" = \" + result],\n      expression: String(result),\n      results: [...this.state.results, result]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form>\n        <span className=\"font-weight-bolder\">Calculator</span>\n          <div className=\"form-group\">\n            <div className=\"input-group mb-3\">\n            <input type=\"text\" className=\"form-control\" placeholder=\"Expression\" aria-label=\"Expression\" value={this.state.expression} onChange={this.handleChange}></input>\n              <div className=\"input-group-append\">\n                \n                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}><span>=</span></button>\n                \n              </div>\n            </div>\n          </div>\n        </form>\n        {this.state.expressions.length > 0 &&\n          <span className=\"font-weight-bolder\">History</span>\n        }\n        <List items={this.state.expressions} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nRegExp.escape = function(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n\nfunction getDelimiter(header) {\n    // return array of delimiter(s) found in header\n    let singleDelimiter = String(header).match(/(?<=^\\/\\/)(.)(?=\\n)/); // parse //{delimiter}\\n{numbers}\n\n    let manyDelimiter = String(header).match(/(?<=\\[)(.*?)(?=\\])/g); // parse //[{delimiter}][...]\\n{numbers}\n\n    return singleDelimiter || manyDelimiter;\n}\n\nexport default function calculate(expression) {\n\n    let negatives = [];\n    let result = [];\n\n    const header = expression.substring(0, expression.indexOf('\\n'));\n\n    const specialDelimiter = getDelimiter(header + '\\n');\n\n    const delimiters = specialDelimiter ? [...specialDelimiter, '\\n'] : ['\\n'];\n\n    for (let delimiter of delimiters) {\n        expression = expression.replace(new RegExp(RegExp.escape(delimiter), \"g\"), ',');\n    };\n\n\n    for (let element of expression.split(',')) {\n        switch (true) {\n            case isNaN(Number(element)): // skip non number\n                result.push(0);\n                break;\n            case Number(element) > 1000: // skip number larger than 1000\n                result.push(0);\n                break;\n            default:\n                result.push(Number(element)); \n                break;\n        }\n    }\n\n    negatives = result.filter(item => item < 0);\n\n    if (negatives.length > 0) {\n        throw new Error('Negative numbers found in input: ' + String(negatives) + '. Negatives are not allowed.')\n    }\n\n    const total = result.reduce((acc, item) => (acc + item), 0);\n\n    // console.log(result.join('+') + ' = ' + total);\n\n    return total;\n}\nmodule.exports = {calculate, getDelimiter};"],"sourceRoot":""}